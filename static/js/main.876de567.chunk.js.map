{"version":3,"sources":["components/Login.js","is-empty.js","components/Quiz.js","components/Home.js","components/QuizInstructions.js","App.js","serviceWorker.js","index.js"],"names":["Login","isEmpty","value","undefined","Object","keys","length","trim","Quiz","state","questions","currentQuestion","nextQuestion","previousQuestion","answer","numberOfAnsweredQuestion","currentQuestionIndex","score","correctAnswers","wrongAnswers","displayQuestions","setState","handleOptionClick","e","target","innerHTML","toLowerCase","correctAnswer","wrongAnswer","showAlert","withReactContent","Swal","fire","icon","title","confirmButtonText","prevState","endQuiz","setTimeout","props","history","push","this","console","log","Helmet","className","question","onClick","optionA","optionB","optionC","optionD","React","Component","Home","to","QuizInstructions","App","path","exact","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.876de567.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./../App.css\";\r\n\r\nfunction Login() {\r\n\treturn (\r\n\t\t<div className=\"login\">\r\n\t\t\t<h3>Login component</h3>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default Login;\r\n","const isEmpty = (value) =>\r\n\tvalue === undefined ||\r\n\tvalue == null ||\r\n\t(typeof value === \"object\" && Object.keys(value).length === 0) ||\r\n\t(typeof value === \"string\" && value.trim().length === 0);\r\n\r\nexport default isEmpty;\r\n","import React, { Component, Fragment } from \"react\";\r\nimport { isCompositeComponentWithType } from \"react-dom/test-utils\";\r\nimport { Helmet } from \"react-helmet\";\r\n\r\nimport questions from \"./../questions.json\";\r\nimport isEmpty from \"./../is-empty.js\";\r\n\r\nimport Swal from \"sweetalert2\";\r\nimport withReactContent from \"sweetalert2-react-content\";\r\n\r\nclass Quiz extends React.Component {\r\n\tstate = {\r\n\t\tquestions,\r\n\t\tcurrentQuestion: {},\r\n\t\tnextQuestion: {},\r\n\t\tpreviousQuestion: {},\r\n\t\tanswer: \"\",\r\n\t\tnumberOfAnsweredQuestion: 0,\r\n\t\tcurrentQuestionIndex: 0,\r\n\t\tscore: 0,\r\n\t\tcorrectAnswers: 0,\r\n\t\twrongAnswers: 0,\r\n\t};\r\n\tcomponentDidMount() {\r\n\t\tconst {\r\n\t\t\tquestions,\r\n\t\t\tcurrentQuestion,\r\n\t\t\tnextQuestion,\r\n\t\t\tpreviousQuestion,\r\n\t\t} = this.state;\r\n\t\tthis.displayQuestions(\r\n\t\t\tquestions,\r\n\t\t\tcurrentQuestion,\r\n\t\t\tnextQuestion,\r\n\t\t\tpreviousQuestion\r\n\t\t);\r\n\t}\r\n\r\n\tdisplayQuestions = (\r\n\t\tquestions = this.state.questions,\r\n\t\tcurrentQuestion,\r\n\t\tnextQuestion,\r\n\t\tpreviousQuestion\r\n\t) => {\r\n\t\tlet { currentQuestionIndex } = this.state;\r\n\t\tif (!isEmpty(this.state.questions)) {\r\n\t\t\tquestions = this.state.questions;\r\n\t\t\tcurrentQuestion = questions[currentQuestionIndex];\r\n\t\t\tnextQuestion = questions[currentQuestionIndex + 1];\r\n\t\t\tpreviousQuestion = questions[currentQuestionIndex - 1];\r\n\t\t\tconst answer = currentQuestion.answer;\r\n\t\t\tthis.setState({\r\n\t\t\t\tcurrentQuestion,\r\n\t\t\t\tnextQuestion,\r\n\t\t\t\tpreviousQuestion,\r\n\t\t\t\tanswer,\r\n\t\t\t});\r\n\t\t}\r\n\t};\r\n\r\n\thandleOptionClick = (e) => {\r\n\t\tif (e.target.innerHTML.toLowerCase() === this.state.answer.toLowerCase()) {\r\n\t\t\tthis.correctAnswer();\r\n\t\t} else {\r\n\t\t\tthis.wrongAnswer();\r\n\t\t}\r\n\t};\r\n\tshowAlert = () => {\r\n\t\tconst MySwal = withReactContent(Swal);\r\n\r\n\t\t//return MySwal.fire(<p>Shorthand works too</p>);\r\n\t\treturn MySwal.fire({\r\n\t\t\ticon: \"success\",\r\n\t\t\ttitle: \"Answer Taken\",\r\n\t\t\tconfirmButtonText: \"Sure\",\r\n\t\t});\r\n\t};\r\n\tcorrectAnswer = () => {\r\n\t\tconst MySwal = withReactContent(Swal);\r\n\t\t//return MySwal.fire(<p>Shorthand works too</p>);\r\n\t\tMySwal.fire({\r\n\t\t\ticon: \"success\",\r\n\t\t\ttitle: \"Answer is Correct\",\r\n\t\t\tconfirmButtonText: \"Okay\",\r\n\t\t});\r\n\t\tthis.setState(\r\n\t\t\t(prevState) => ({\r\n\t\t\t\tscore: prevState.score + 1,\r\n\t\t\t\tcorrectAnswers: prevState.correctAnswer + 1,\r\n\t\t\t\tcurrentQuestionIndex: prevState.currentQuestionIndex + 1,\r\n\t\t\t\tnumberOfAnsweredQuestion: prevState.numberOfAnsweredQuestion + 1,\r\n\t\t\t}),\r\n\t\t\t() => {\r\n\t\t\t\tif (this.state.nextQuestion === undefined) {\r\n\t\t\t\t\tthis.endQuiz();\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthis.displayQuestions(\r\n\t\t\t\t\t\tthis.state.questions,\r\n\t\t\t\t\t\tthis.state.currentQuestionIndex,\r\n\t\t\t\t\t\tthis.nextQuestion,\r\n\t\t\t\t\t\tthis.previousQuestion\r\n\t\t\t\t\t);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t);\r\n\t};\r\n\twrongAnswer = () => {\r\n\t\tconst MySwal = withReactContent(Swal);\r\n\t\tMySwal.fire({\r\n\t\t\ticon: \"error\",\r\n\t\t\ttitle: \"Answer is Incorrect\",\r\n\t\t\tconfirmButtonText: \"Try Next\",\r\n\t\t});\r\n\t\tthis.setState(\r\n\t\t\t(prevState) => ({\r\n\t\t\t\twrongAnswers: prevState.wrongAnswers + 1,\r\n\t\t\t\tcurrentQuestionIndex: prevState.currentQuestionIndex + 1,\r\n\t\t\t\tnumberOfAnsweredQuestion: prevState.numberOfAnsweredQuestion + 1,\r\n\t\t\t}),\r\n\t\t\t() => {\r\n\t\t\t\tif (this.state.nextQuestion === undefined) {\r\n\t\t\t\t\tthis.endQuiz();\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthis.displayQuestions(\r\n\t\t\t\t\t\tthis.state.questions,\r\n\t\t\t\t\t\tthis.state.currentQuestionIndex,\r\n\t\t\t\t\t\tthis.nextQuestion,\r\n\t\t\t\t\t\tthis.previousQuestion\r\n\t\t\t\t\t);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t);\r\n\t};\r\n\tendQuiz = () => {\r\n\t\tconst MySwal = withReactContent(Swal);\r\n\t\tMySwal.fire({\r\n\t\t\ttitle: \"The Quiz is finished! Well Done!\",\r\n\t\t});\r\n\t\tsetTimeout(() => {\r\n\t\t\tthis.props.history.push(\"/play/instructions\");\r\n\t\t}, 1000);\r\n\t};\r\n\r\n\trender() {\r\n\t\tconsole.log(questions);\r\n\t\tconst { currentQuestion } = this.state;\r\n\t\tconsole.log(currentQuestion);\r\n\t\treturn (\r\n\t\t\t<Fragment>\r\n\t\t\t\t<Helmet>\r\n\t\t\t\t\t<title>Quiz Page</title>{\" \"}\r\n\t\t\t\t</Helmet>\r\n\t\t\t\t<div className=\"container\">\r\n\t\t\t\t\t<div className=\"questions\">\r\n\t\t\t\t\t\t<h5>{currentQuestion.question} </h5>\r\n\t\t\t\t\t\t<div className=\"options-container\">\r\n\t\t\t\t\t\t\t<p onClick={this.handleOptionClick} className=\"option\">\r\n\t\t\t\t\t\t\t\t{currentQuestion.optionA}\r\n\t\t\t\t\t\t\t</p>\r\n\t\t\t\t\t\t\t<p onClick={this.handleOptionClick} className=\"option\">\r\n\t\t\t\t\t\t\t\t{currentQuestion.optionB}\r\n\t\t\t\t\t\t\t</p>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div className=\"options-container\">\r\n\t\t\t\t\t\t\t<p onClick={this.handleOptionClick} className=\"option\">\r\n\t\t\t\t\t\t\t\t{currentQuestion.optionC}\r\n\t\t\t\t\t\t\t</p>\r\n\t\t\t\t\t\t\t<p onClick={this.handleOptionClick} className=\"option\">\r\n\t\t\t\t\t\t\t\t{currentQuestion.optionD}\r\n\t\t\t\t\t\t\t</p>\r\n\t\t\t\t\t\t</div>\r\n\r\n\t\t\t\t\t\t<div className=\"button-container mt-3\">\r\n\t\t\t\t\t\t\t<button className=\"btn btn-secondary mr-2\">Previous</button>\r\n\t\t\t\t\t\t\t<button className=\"btn btn-success mr-2\">Next</button>\r\n\t\t\t\t\t\t\t<button className=\"btn btn-danger mr-2\">Quit</button>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</Fragment>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default Quiz;\r\n","import React, { Fragment } from \"react\";\r\nimport { Helmet } from \"react-helmet\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport \"./../App.css\";\r\n\r\nconst Home = () => (\r\n\t<Fragment>\r\n\t\t<Helmet>\r\n\t\t\t{\" \"}\r\n\t\t\t<title>Quiz App - Home</title>{\" \"}\r\n\t\t</Helmet>\r\n\r\n\t\t<div className=\"home\">\r\n\t\t\t<h1 className=\"text-center mt-5\">Quiz App</h1>\r\n\r\n\t\t\t<Link to=\"/play/instructions\">\r\n\t\t\t\t<button className=\"btn btn-primary mr-5\">Play</button>\r\n\t\t\t</Link>\r\n\t\t\t<Link to=\"/login\">\r\n\t\t\t\t<button className=\"btn btn-info mr-5\">Login</button>\r\n\t\t\t</Link>\r\n\t\t\t<Link to=\"/register\">\r\n\t\t\t\t<button className=\"btn btn-secondary mr-5\">Sign Up</button>\r\n\t\t\t</Link>\r\n\t\t</div>\r\n\t</Fragment>\r\n);\r\n\r\nexport default Home;\r\n","import React, { Component, Fragment } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Helmet } from \"react-helmet\";\r\n\r\nconst QuizInstructions = () => {\r\n\treturn (\r\n\t\t<Fragment>\r\n\t\t\t<Helmet>\r\n\t\t\t\t<title>Quiz Instructions - Quiz App</title>\r\n\t\t\t</Helmet>\r\n\t\t\t<div className=\"container text-center\">\r\n\t\t\t\t<h1 className=\"text-center mt-5\">Just play a simple quiz app</h1>\r\n\t\t\t\t<h3 className=\"text-center mt-5\">\r\n\t\t\t\t\tThere are no instructions actually :V\r\n\t\t\t\t</h3>\r\n\t\t\t\t<Link to=\"/play/quiz\">\r\n\t\t\t\t\t<button className=\"btn btn-outline-success\">Take the quiz!</button>\r\n\t\t\t\t</Link>\r\n\t\t\t</div>\r\n\t\t</Fragment>\r\n\t);\r\n};\r\n\r\nexport default QuizInstructions;\r\n","import React, { useState } from \"react\";\n\n//Importing CSS\nimport \"./App.css\";\n\n//Importing Components\nimport Nav from \"./components/Nav\";\nimport Login from \"./components/Login\";\nimport Quiz from \"./components/Quiz\";\nimport AddQuiz from \"./components/AddQuiz\";\nimport Home from \"./components/Home\";\nimport QuizInstructions from \"./components/QuizInstructions\";\n\n//Importing from react router\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\n\nfunction App() {\n\treturn (\n\t\t/*\n\t\t<Router>\n\t\t\t<div className=\"App\">\n\t\t\t\t<Nav />\n\t\t\t\t<Switch>\n\t\t\t\t\t<Route exact path=\"/login\" component={Login} />\n\t\t\t\t\t<Route exact path=\"/quiz\" component={Quiz} />\n\t\t\t\t\t<Route exact path=\"/add-quiz\" component={AddQuiz} />\n\t\t\t\t</Switch>\n\t\t\t</div>\n\t\t</Router>\n\t\t*/\n\t\t<Router>\n\t\t\t<Route path=\"/\" exact component={Home} />\n\t\t\t<Route path=\"/play/instructions\" exact component={QuizInstructions} />\n\t\t\t<Route path=\"/play/quiz\" exact component={Quiz} />\n\t\t</Router>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}